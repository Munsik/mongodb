{"ast":null,"code":"import React,{useState}from\"react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[query,setQuery]=useState(\"\");const[searchType,setSearchType]=useState(\"lexical\");const[results,setResults]=useState(null);const handleSearch=async()=>{const response=await fetch(\"http://localhost:3000/search\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({query,type:searchType})});const data=await response.json();setResults(data);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Movie Search\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Search for movies...\",value:query,onChange:e=>setQuery(e.target.value)}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",value:\"lexical\",checked:searchType===\"lexical\",onChange:()=>setSearchType(\"lexical\")}),\"Lexical Search\"]}),/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",value:\"hybrid\",checked:searchType===\"hybrid\",onChange:()=>setSearchType(\"hybrid\")}),\"Hybrid Search\"]}),/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",value:\"rag\",checked:searchType===\"rag\",onChange:()=>setSearchType(\"rag\")}),\"RAG Search\"]})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSearch,children:\"Search\"}),results&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Results (\",results.totalResults,\")\"]}),/*#__PURE__*/_jsx(\"ul\",{children:results.data.map(movie=>/*#__PURE__*/_jsx(\"li\",{children:movie.title},movie._id))})]})]});}export default App;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","App","query","setQuery","searchType","setSearchType","results","setResults","handleSearch","response","fetch","method","headers","body","JSON","stringify","type","data","json","children","placeholder","value","onChange","e","target","checked","onClick","totalResults","map","movie","title","_id"],"sources":["/Users/munsik/Documents/project/movie/client/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [searchType, setSearchType] = useState(\"lexical\");\n  const [results, setResults] = useState(null);\n\n  const handleSearch = async () => {\n    const response = await fetch(\"http://localhost:3000/search\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ query, type: searchType }),\n    });\n    const data = await response.json();\n    setResults(data);\n  };\n\n  return (\n    <div>\n      <h1>Movie Search</h1>\n      <input\n        type=\"text\"\n        placeholder=\"Search for movies...\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n      />\n      <div>\n        <label>\n          <input\n            type=\"radio\"\n            value=\"lexical\"\n            checked={searchType === \"lexical\"}\n            onChange={() => setSearchType(\"lexical\")}\n          />\n          Lexical Search\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            value=\"hybrid\"\n            checked={searchType === \"hybrid\"}\n            onChange={() => setSearchType(\"hybrid\")}\n          />\n          Hybrid Search\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            value=\"rag\"\n            checked={searchType === \"rag\"}\n            onChange={() => setSearchType(\"rag\")}\n          />\n          RAG Search\n        </label>\n      </div>\n      <button onClick={handleSearch}>Search</button>\n\n      {results && (\n        <div>\n          <h2>Results ({results.totalResults})</h2>\n          <ul>\n            {results.data.map((movie) => (\n              <li key={movie._id}>{movie.title}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAExC,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGP,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACQ,UAAU,CAAEC,aAAa,CAAC,CAAGT,QAAQ,CAAC,SAAS,CAAC,CACvD,KAAM,CAACU,OAAO,CAAEC,UAAU,CAAC,CAAGX,QAAQ,CAAC,IAAI,CAAC,CAE5C,KAAM,CAAAY,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/B,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,8BAA8B,CAAE,CAC3DC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEb,KAAK,CAAEc,IAAI,CAAEZ,UAAW,CAAC,CAClD,CAAC,CAAC,CACF,KAAM,CAAAa,IAAI,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAClCX,UAAU,CAACU,IAAI,CAAC,CAClB,CAAC,CAED,mBACEjB,KAAA,QAAAmB,QAAA,eACErB,IAAA,OAAAqB,QAAA,CAAI,cAAY,CAAI,CAAC,cACrBrB,IAAA,UACEkB,IAAI,CAAC,MAAM,CACXI,WAAW,CAAC,sBAAsB,CAClCC,KAAK,CAAEnB,KAAM,CACboB,QAAQ,CAAGC,CAAC,EAAKpB,QAAQ,CAACoB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC3C,CAAC,cACFrB,KAAA,QAAAmB,QAAA,eACEnB,KAAA,UAAAmB,QAAA,eACErB,IAAA,UACEkB,IAAI,CAAC,OAAO,CACZK,KAAK,CAAC,SAAS,CACfI,OAAO,CAAErB,UAAU,GAAK,SAAU,CAClCkB,QAAQ,CAAEA,CAAA,GAAMjB,aAAa,CAAC,SAAS,CAAE,CAC1C,CAAC,iBAEJ,EAAO,CAAC,cACRL,KAAA,UAAAmB,QAAA,eACErB,IAAA,UACEkB,IAAI,CAAC,OAAO,CACZK,KAAK,CAAC,QAAQ,CACdI,OAAO,CAAErB,UAAU,GAAK,QAAS,CACjCkB,QAAQ,CAAEA,CAAA,GAAMjB,aAAa,CAAC,QAAQ,CAAE,CACzC,CAAC,gBAEJ,EAAO,CAAC,cACRL,KAAA,UAAAmB,QAAA,eACErB,IAAA,UACEkB,IAAI,CAAC,OAAO,CACZK,KAAK,CAAC,KAAK,CACXI,OAAO,CAAErB,UAAU,GAAK,KAAM,CAC9BkB,QAAQ,CAAEA,CAAA,GAAMjB,aAAa,CAAC,KAAK,CAAE,CACtC,CAAC,aAEJ,EAAO,CAAC,EACL,CAAC,cACNP,IAAA,WAAQ4B,OAAO,CAAElB,YAAa,CAAAW,QAAA,CAAC,QAAM,CAAQ,CAAC,CAE7Cb,OAAO,eACNN,KAAA,QAAAmB,QAAA,eACEnB,KAAA,OAAAmB,QAAA,EAAI,WAAS,CAACb,OAAO,CAACqB,YAAY,CAAC,GAAC,EAAI,CAAC,cACzC7B,IAAA,OAAAqB,QAAA,CACGb,OAAO,CAACW,IAAI,CAACW,GAAG,CAAEC,KAAK,eACtB/B,IAAA,OAAAqB,QAAA,CAAqBU,KAAK,CAACC,KAAK,EAAvBD,KAAK,CAACE,GAAsB,CACtC,CAAC,CACA,CAAC,EACF,CACN,EACE,CAAC,CAEV,CAEA,cAAe,CAAA9B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}